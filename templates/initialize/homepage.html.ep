<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN'
'http://www.w3.org/TR/html4/strict.dtd'>
<html>

<head>

	<title>Garden Design</title>
	<meta http-equiv = 'Content-Type' content = 'text/html; charset = utf-8' />

	<link rel = 'stylesheet' href = 'http://127.0.0.1/assets/js/jQuery/jquery-ui-1.12.1.custom/jquery-ui.theme.min.css'>
	<link rel = 'stylesheet' type = 'text/css' href='http://127.0.0.1/assets/js/jQuery/jquery-ui-1.12.1/jquery-ui.min.css'>
	<link rel = 'stylesheet' type = 'text/css' href='http://127.0.0.1/assets/js/jQuery/datatables.min.css'>
	<!-- Warning: The next line must not be put after the spectrum line, or the CSS in it fails to work. -->
	<link rel = 'stylesheet' type = 'text/css' href = 'http://127.0.0.1/assets/css/www/garden/design/homepage.css'>
	<link rel = 'stylesheet' type = 'text/css' href = 'http://127.0.0.1/assets/js/spectrum/spectrum.css'>
	<style>
		.overflow_scroll
		{
			border:		1px solid #00aa00;
			height:		600px;
			padding:	1em;
			overflow:	scroll;
			width:		1500px;
		}
	</style>

</head>

<body>

<h3 class = 'blue_centered'>Garden Design</h3>

<div id = 'global_tab_div'>
	<ul>
		<li><a href = '#global_search_tab'><span>Search</span></a></li>
		<li><a href = '#global_details_tab'><span>Details</span></a></li>
		<li><a href = '#global_garden_tab'><span>Gardens</span></a></li>
		<li><a href = '#global_object_tab'><span>Objects</span></a></li>
		<li><a href = '#global_design_tab'><span>Design</span></a></li>
		<li><a href = '#global_help_tab'><span>Help</span></a></li>
	</ul>
	<div id = 'global_search_tab'>
%= include 'initialize/search'
	</div>
	<div id = 'global_details_tab'>
		<form id = 'details_form' name = 'details_form'>
		    <ul>
		        <li><a href = '#flower_tab'><span>Flower</span></a></li>
		        <li><a href = '#attributes_tab'><span>Attributes</span></a></li>
		        <li><a href = '#images_tab'><span>Images</span></a></li>
		        <li><a href = '#notes_tab'><span>Notes</span></a></li>
		        <li><a href = '#urls_tab'><span>URLs</span></a></li>
		    </ul>
		    <div id = 'flower_tab'>
%= include 'initialize/flower'
			</div>
		    <div id = 'attributes_tab'>
%= include 'initialize/attributes'
			</div>
		    <div id = 'images_tab'>
%= include 'initialize/images', constants => $constants
			</div>
		    <div id = 'notes_tab'>
%= include 'initialize/notes', constants => $constants
			</div>
		    <div id = 'urls_tab'>
%= include 'initialize/urls'
			</div>
		</form>
	</div>
	<div id = 'global_garden_tab'>
%= include 'initialize/garden', garden_garden_menu => $garden_garden_menu, garden_property_menu => $garden_property_menu
	</div>
	<div id = 'global_object_tab'>
%= include 'initialize/object', object_menu => $object_menu
	</div>
	<div id = 'global_design_tab'>
%= include 'initialize/design', constants => $constants, design_garden_menu => $design_garden_menu, design_property_menu => $design_property_menu
	</div>
	<div id = 'global_help_tab'>
		<div id = 'help_div'>
		    <ul>
		        <li><a href = '#search_help_tab'><span>Searching</span></a></li>
		        <li><a href = '#faq_help_tab'><span>FAQ</span></a></li>
		    </ul>
		    <div id = 'search_help_tab'>
%= include 'initialize/search_help'
			</div>
		    <div id = 'faq_help_tab'>
%= include 'initialize/faq_help'
			</div>
		</div>
	</div>
</div>

</body>

%= javascript 'https://code.jquery.com/jquery-3.2.1.min.js'
%= javascript 'http://127.0.0.1/assets/js/jQuery/jquery-ui-1.12.1/jquery-ui.min.js'
%= javascript 'http://127.0.0.1/assets/js/jQuery/datatables.min.js'
%= javascript 'http://127.0.0.1/assets/js/spectrum/spectrum.js'

<script type = 'text/javascript'>

// Storage for info read in below from the database.

var attribute_types_table	= [];
var chosen_thing			= '';
var garden_table			= [];
var object_table			= [];
var window_width			= 0;
var window_height			= 0;

// -----------------------------------------------

$(function()
{
	$('#aliases')
	.autocomplete
	({
		source:		'/AutoComplete?type=aliases',
		minLength:	2,
		select:		function(event, ui)
		{
			$('#aliases')
			.empty()
			.append(ui.item ? ui.item.value : '-');
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#common_name')
	.autocomplete
	({
		source:		'/AutoComplete?type=common_name',
		minLength:	2,
		select:		function(event, ui)
		{
			$('#common_name')
			.empty()
			.append(ui.item ? ui.item.value : '-');
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#garden_name')
	.autocomplete
	({
		source:		'/AutoComplete?type=garden_name',
		minLength:	2,
		select:		function(event, ui)
		{
			if (ui.item)
			{
				$('#garden_name')
				.empty()
				.append(ui.item.value);
			}
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#design_flower')
	.autocomplete
	({
		source:		'/AutoComplete?type=design_flower',
		minLength:	2,
		select:		function(event, ui)
		{
			if (ui.item)
			{
				$('#design_flower')
				.empty()
				.append(ui.item.value);
			}
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#design_object')
	.autocomplete
	({
		source:		'/AutoComplete?type=design_object',
		minLength:	2,
		select:		function(event, ui)
		{
			if (ui.item)
			{
				$('#design_object')
				.empty()
				.append(ui.item.value);
			}
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#object_name')
	.autocomplete
	({
		source:		'/AutoComplete?type=object_name',
		minLength:	2,
		select:		function(event, ui)
		{
			$('#object_name')
			.empty()
			.append(ui.item ? ui.item.value : '-');
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#property_name')
	.autocomplete
	({
		source:		'/AutoComplete?type=property_name',
		minLength:	2,
		select:		function(event, ui)
		{
			if (ui.item)
			{
				$('#property_name')
				.empty()
				.append(ui.item.value);
			}
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$('#scientific_name')
	.autocomplete
	({
		source:		'/AutoComplete?type=scientific_name',
		minLength:	2,
		select:		function(event, ui)
		{
			$('#scientific_name')
			.empty()
			.append(ui.item ? ui.item.value : '-');
		}
	});

}); // End of autocomplete function.

// -----------------------------------------------

$(function()
{
	$("#search_text")
	.autocomplete
	({
		source: "/AutoComplete?type=search",
		minLength: 2,
		select: function(event, ui)
		{
			$("#search_text")
			.empty()
			.append(ui.item ? ui.item.value : "-");
		}
	});
}); // End of autocomplete function.

// -----------------------------------------------

function build_attribute_id(kind, name, value)
{
	// We must allow for:
	// o Names like 'Sun tolerance'.
	// o Range values like 'Full sun' and 'Semi-dwarf'.

	name	= name.replace(/\s|-/g, '_');
	value	= value.replace(/\s|-/g, '_');

	return '#' + kind + '_' + name + '_' + value;

} // End of build_attribute_id.

// -----------------------------------------------

function build_garden_menu(property_id, garden_menu_name)
{
	var first_id	= 0;
	var html		= "<select id = '" + garden_menu_name + "'>"
						+ "<option disabled = '1' selected>Gardens</option>";

	var id;
	var name;

	for (var i = 0; i < garden_table.length; i++)
	{
		if (garden_table[i]['property_id'] == property_id)
		{
			id		= garden_table[i]['id'];
			name	= garden_table[i]['name'];

			if (first_id == 0)
			{
				first_id	= id;
				html		+= "<option value = '" + id + "' selected>" + name + '</option>';
			}
			else
			{
				html += "<option value = '" + id + "'>" + name + '</option>';
			}
		}
	}

	html	+= '</select>';
	id		= '#' + garden_menu_name;

	$(id + '_span')
	.empty()
	.append(html);

	// Warning: These 2 calls to selectmenu() are mandatory.

	if (garden_menu_name == 'garden_garden_menu')
	{
		$(id)
		.selectmenu
		({
			change: function(event, data)
			{
				garden_garden_menu_changed(data);
			}
		});
	}
	else
	{
		$(id)
		.selectmenu();
	}

} // End of build_garden_menu.

// -----------------------------------------------

function build_image_ids(sequence)
{
	// Names are in alphabetical order.

	var ids =
	[
		'#image_description_' + sequence,	// 0.
		'#image_file_name_' + sequence,		// 1.
		'#image_image_' + sequence,			// 2.
		'#image_sequence_' + sequence		// 3.
	];

	return ids;

} // End of build_image_ids.

// -----------------------------------------------

function build_note_ids(sequence)
{
	// Names are in alphabetical order.

	var ids	=
	[
		'#note_note_' + sequence,		// 0.
		'#note_sequence_' + sequence	// 1.
	];

	return ids;

} // End of build_note_ids.

// -----------------------------------------------

function build_url_ids(sequence)
{
	// Names are in alphabetical order.

	var ids	=
	[
		'#url_sequence_' + sequence,	// 0.
		'#url_url_' + sequence			// 1.
	];

	return ids;

} // End of build_url_ids.

// -----------------------------------------------
// Note: Changed means the user changed the selected item.

function design_property_menu_changed(data)
{
	//	for( key in data )
	//	{
	//		alert( "key is " + [ key ] + ", value is " + data[ key ] );
	//	}

	// Typical keys for data.item are:
	//	o label => The property item's text (name column).
	//	o value => The property item's # (primary key column).

	current_property_id = data.item.value;

	for (var i = 0; i < garden_table.length; i++)
	{
		if (garden_table[i]['property_id'] == current_property_id)
		{
			build_garden_menu(current_property_id, 'design_garden_menu');

			break;
		}
	}

} // End of design_property_menu_changed.

// -----------------------------------------------
// Note: Changed means the user changed the selected item.

function garden_garden_menu_changed(data)
{
//	for( key in data )
//	{
//		alert( "key is " + [ key ] + ", value is " + data[ key ] );
//	}

// Typical keys for data.item are:
//	o label => The garden item's text (name column).
//	o value => The garden item's # (primary key column).

	current_garden_id = data.item.value;

	for (var i = 0; i < garden_table.length; i++)
	{
		if (garden_table[i]['id'] == current_garden_id)
		{
			set_garden_fields(i);

			break;
		}
	}

} // End of garden_garden_menu_changed.

// -----------------------------------------------
// Note: Changed means the user changed the selected item.

function garden_property_menu_changed(data)
{
	//	for( key in data )
	//	{
	//		alert( "key is " + [ key ] + ", value is " + data[ key ] );
	//	}

	// Typical keys for data.item are:
	//	o label => The property item's text (name column).
	//	o value => The property item's # (primary key column).

	current_property_id = data.item.value;

	for (var i = 0; i < garden_table.length; i++)
	{
		if (garden_table[i]['property_id'] == current_property_id)
		{
			set_property_fields(i);
			build_garden_menu(current_property_id, 'garden_garden_menu');
			set_garden_fields(i);

			break;
		}
	}

} // End of garden_property_menu_changed.

// -----------------------------------------------

function get_attribute_types()
{
	$.get
	(
		'/GetTable/attribute_types',
		null,
		function(json)
		{
			attribute_types_table = json;
		},
		'json'
	);

} // End of get_attribute_types.

// -----------------------------------------------

function get_design_flower()
{
	$.ajax
	({
		data:
		{
			design_flower: $('#design_flower').val()
		},
		dataType:	'text',
		method:		'POST',
		url:		'/GetTable/design_flower',
	})
	.done(function(image_path)
	{
		if (image_path.length > 0)
		{
			$('#design_flower_thumbnail')
			.html("<img src = '" + image_path + "' " + get_design_image_size_string() + '>');
		}
	});

} // End of get_design_flower.

// -----------------------------------------------

function get_design_flower_icon()
{
	var html = $('#design_flower_thumbnail').html();

	if (html.length > 0)
	{
		chosen_thing = html;
	}

} // End of get_design_flower_icon.

// -----------------------------------------------

function get_design_object()
{
	$.ajax
	({
		data:
		{
			design_object: $('#design_object').val()
		},
		dataType:	'text',
		method:		'POST',
		url:		'/GetTable/design_object',
	})
	.done(function(image_path)
	{
		if (image_path.length > 0)
		{
			$('#design_object_thumbnail')
			.html("<img src = '" + image_path + "' " + get_design_image_size_string() + '>');
		}
	});

} // End of get_design_object.

// -----------------------------------------------

function get_design_object_icon()
{
	var html = $('#design_object_thumbnail').html();

	if (html.length > 0)
	{
		chosen_thing = html;
	}

} // End of get_design_object_icon.

// -----------------------------------------------

function get_design_image_size_string()
{
	var thumbnail_size = <%== $$constants{virtual_cell_size} %>;

	return "width = '" + thumbnail_size + "' height = '" + thumbnail_size + "'";

} // End of get_design_image_size_string.

// -----------------------------------------------
// Warning: This function cannot be used to populate garden_garden_menu_span
// since that involves changing the DOM, but the function is called from within
// the document ready context which assumes the DOM has stopped changing.

function get_garden_table()
{
	$.get
	(
		'/GetTable/gardens',
		null,
		function(json)
		{
			garden_table = json;

			set_property_fields(0);
			set_garden_fields(0);
		},
		'json'
	);

} // End of get_garden_table.

// -----------------------------------------------
// Warning: This function cannot be used to populate object_menu_span
// since that involves changing the DOM, but the function is called from within
// the document ready context which assumes the DOM has stopped changing.

function get_object_table()
{
	$.get
	(
		'/GetTable/objects',
		null,
		function(json)
		{
			object_table = json;

			set_object_fields(0);

			// This is not called where get_object_table() is called,
			// because when placed there it pauses for 15 seconds.

			get_garden_table();
		},
		'json'
	);

} // End of get_object_table.

// -----------------------------------------------

function get_search_image_size_string()
{
	var thumbnail_size = <%== $$constants{search_thumbnail_size} %>;

	return "width = '" + thumbnail_size + "' height = '" + thumbnail_size + "'";

} // End of get_search_image_size_string.

// -----------------------------------------------
// Note: Changed means the user changed the selected item.

function object_menu_changed(data)
{
	//	for( key in data )
	//	{
	//		alert( "key is " + [ key ] + ", value is " + data[ key ] );
	//	}

	// Typical keys for data.item are:
	//	o label => The object item's text (name column).
	//	o value => The object item's # (primary key column).

	current_object_id = data.item.value;

	for (var i = 0; i < object_table.length; i++)
	{
		if (object_table[i]['id'] == current_object_id)
		{
			set_object_fields(i);

			break;
		}
	}

} // End of object_menu_changed.

// -----------------------------------------------

function plant_flower(id, row, column)
{
	if (chosen_thing.length > 0)
	{
		$(id).html(chosen_thing);
	}

} // End of plant_flower.

// -----------------------------------------------

function populate_details(flower_id)
{
	$.ajax
	({
		data:
		{
			flower_id: flower_id
		},
		dataType:	'json',
		method:		'POST',
		url:		'/GetFlowerDetails'
	})
	.done(function(flower)
	{
		// Make the Details tab, tab 1, active.

		$('#global_tab_div')
		.tabs('option', 'active', 1);

		// Copy flower data to the Details/Flower tab.

		$('#flower_common_name')
		.val(flower['common_name']);

		$('#flower_scientific_name')
		.val(flower['scientific_name']);

		$('#flower_aliases')
		.val(flower['aliases']);

		$('#flower_height')
		.val(flower['height']);

		$('#flower_publish')
		.prop('checked', (flower['publish'] == 'Yes') ? true : false);

		$('#flower_width')
		.val(flower['width']);

		var homepage_url		= <%== $$constants{homepage_url4js} %>;
		var image_url			= <%== $$constants{image_url4js} %>;
		var image_path			= homepage_url + image_url + '/' + flower['pig_latin'] + '.0.jpg';
		var thumbnail_html		= "<img src = '" + image_path + "' " + get_search_image_size_string() + '>';

		$('#flower_thumbnail')
		.html(thumbnail_html);

		// Copy basic flower data to the Details/Flower's other sub-tabs.
		// Warning: Don't include 'details' in the tabs array, because
		// it's fields are input fields, while all others are spans.

		var tabs = ['attribute', 'note', 'image', 'url'];
		var vars = ['common_name', 'scientific_name'];

		for (var i = 0; i < tabs.length; i++)
		{
			for (var j = 0; j < vars.length; j++)
			{
				id = '#' + tabs[i] + '_' + vars[j];

				$(id)
				.text(flower[vars[j] ]);
			}
		}

		// Copy attributes to the Details/Attributes tab.

		var range = [];

		var attribute_name;
		var value;

		// Attributes: Copy attribute types to the Flower/Attributes tab.
		// 1: Remove any existing attributes.

		for (var i = 0; i < attribute_types_table.length; i++)
		{
			attribute_name	= attribute_types_table[i]['name'];
			range			= attribute_types_table[i]['range'].split(', ');

			for (var j = 0; j < range.length; j++)
			{
				value	= range[j];
				id		= build_attribute_id('attribute', attribute_name, value);

				$(id)
				.prop('checked', false);
			}
		}

		var attribute;
		var attribute_type_name;

		// 2: Loop over all attributes owned by this flower.

		for (var i = 0; i < flower['attributes'].length; i++)
		{
			attribute		= flower['attributes'][i];
			attribute_name	= attribute['name'];
			range			= attribute['range'].split(', ');

			// Loop over all attribute types.

			for (var j = 0; j < attribute_types_table.length; j++)
			{
				attribute_type_name = attribute_types_table[j]['name'];

				// Find the attribute type whose name matches the name of the flower's attribute.

				if (attribute_name != attribute_type_name)
				{
					continue;
				}

				for (var k = 0; k < range.length; k++)
				{
					value	= range[k];
					id		= build_attribute_id('attribute', attribute_name, value);

					if (value != '')
					{
						$(id)
						.prop('checked', true);
					}
				}
			}
		}

		// Images: Copy images to the Details/Images tab.
		// 1: Remove any existing images.

		var ids			= [];
		var image_count	= <%== $$constants{max_image_count} %>;

		for (var i = 0; i < image_count; i++)
		{
			ids.push(build_image_ids(i + 1) );

			// For the HTML column order, see templates/initialize/images.html.ep.

			$(ids[i][0])
			.val('');	// Description.

			$(ids[i][1])
			.val('');	// File name.

			$(ids[i][2])
			.text('');	// Image.

			$(ids[i][3])
			.val('');	// Sequence.
		}

		// 2: Loop over all images owned by this flower.

		ids			= [];
		image_count	= (flower['images'].length > image_count) ? image_count : flower['images'].length;

		var description;
		var file_name;
		var sequence;

		for (var i = 0; i < image_count; i++)
		{
			description		= flower['images'][i]['description'];
			file_name		= flower['images'][i]['file_name'];
			sequence		= flower['images'][i]['sequence'];
			ids[i]			= build_image_ids(sequence);
			image_path		= homepage_url + image_url + '/' + file_name;
			thumbnail_html	= "<img src = '" + image_path + "' " + get_search_image_size_string() + '>';

			// For the HTML column order, see templates/initialize/images.html.ep.

			$(ids[i][0])
			.val(description);

			$(ids[i][1])
			.val(file_name);

			$(ids[i][2])
			.html(thumbnail_html);

			$(ids[i][3])
			.val(sequence);
		}

		// Notes: Copy notes to the Details/Notes tab.
		// 1: Remove any existing notes.

		ids			= [];
		note_count	= <%== $$constants{max_note_count} %>;

		for (var i = 0; i < note_count; i++)
		{
			ids.push(build_note_ids(i + 1) );

			// For the HTML column order, see templates/initialize/notes.html.ep.

			$(ids[i][0])
			.val('');	// Note.

			$(ids[i][1])
			.val('');	// Sequence.
		}

		// 2: Loop over all notes owned by this flower.

		ids			= [];
		note_count	= (flower['notes'].length > note_count) ? note_count : flower['notes'].length;

		var note;

		for (var i = 0; i < note_count; i++)
		{
			note		= flower['notes'][i]['note'];
			sequence	= flower['notes'][i]['sequence'];
			ids[i]		= build_note_ids(sequence);

			// For the HTML column order, see templates/initialize/notes.html.ep.

			$(ids[i][0])
			.val(note);

			$(ids[i][1])
			.val(sequence);
		}

		// URLs: Copy urls to the Details/URLs tab.
		// 1: Remove any existing URLs.

		ids			= [];
		url_count	= <%== $$constants{max_url_count} %>;

		for (var i = 0; i < url_count; i++)
		{
			ids.push(build_url_ids(i) );

			// For the HTML column order, see templates/initialize/urls.html.ep.

			$(ids[i][0])
			.val('');	// Sequence.

			$(ids[i][1])
			.val('');	// URL.
		}

		// 2: Loop over all URLs owned by this flower.

		ids			= [];
		url_count	= (flower['urls'].length > url_count) ? url_count : flower['urls'].length;

		var url;

		for (var i = 0; i < url_count; i++)
		{
			sequence	= flower['urls'][i]['sequence'];
			url			= flower['urls'][i]['url'];
			ids[i]		= build_url_ids(sequence);

			// For the HTML column order, see templates/initialize/urls.html.ep.

			$(ids[i][0])
			.val(sequence);

			$(ids[i][1])
			.val(url);
		}
	})
	.fail(function(jqxhr, textStatus, error)
	{
		alert('Ajax status: ' + textStatus + ', ' + error);
	});

} // End of populate_details.

// -----------------------------------------------

function set_garden_fields(i)
{
	$('#garden_description')
	.val(garden_table[i]['description']);

	$('#garden_name')
	.val(garden_table[i]['name']);

	$('#garden_publish') // In garden_table, do not use 'garden_publish'!
	.prop('checked', (garden_table[i]['publish'] == 'Yes') ? true : false);

} // End of set_garden_fields.

// -----------------------------------------------

function set_object_fields(i)
{
	$('#color_code')
	.val(object_table[i]['hex_color']);

	$('#object_name')
	.val(object_table[i]['name'])
	.focus();

	$('#object_icon')
	.attr('src', object_table[i]['icon_url']);

	$('#color_spectrum')
	.spectrum('set', object_table[i]['hex_color']);

	$('#color_swatch_chosen')
	.css('background-color', object_table[i]['hex_color']);

	$('#object_publish')
	.prop('checked', (object_table[i]['publish'] == 'Yes') ? true : false);

	// Put color in hidden form field for submit.

	$('#color_chosen')
	.val(object_table[i]['hex_color']);

} // End of set_object_fields.

// -----------------------------------------------

function set_property_fields(i)
{
	$('#property_description')
	.val(garden_table[i]['property_description']);

	$('#property_name')
	.val(garden_table[i]['property_name']);

	$('#property_publish')
	.prop('checked', (garden_table[i]['property_publish'] == 'Yes') ? true : false);

} // End of set_property_fields.

// -----------------------------------------------

function set_virtual_parameters()
{
	// Initialize globals.

	var virtual_cell_count	= <%== $$constants{virtual_cell_count} %>;
	var table				= "<table align = 'center' class = 'bordered' width = '100%'>\n";

	var column;
	var id;
	var row;

	for (row = 1; row <= virtual_cell_count; row++)
	{
		table += "\t<tr>\n";

		for (column = 1; column <= virtual_cell_count; column++)
		{
			id		= 'id_' + row + '_' + column;
			table	+= "<td class = 'generic_border_margin'>" +
						"<div id = '" + id + "'>(" + row + ',' + column + ')</div></td>';
		}

		table += "\n\t</tr>\n";
	}

	table += '</table>';

	$('#virtual_garden').html(table);

	$("#virtual_garden td").click(function()
	{
		column	= parseInt( $(this).index() ) + 1;
		row		= parseInt( $(this).parent().index() )+1;
		id		= '#id_' + row + '_' + column;

		plant_flower(id, row, column);
	});

} // End of set_virtual_parameters.

// -----------------------------------------------
//			edible:				document.edible.value,
//			habit:				document.habit.value,
//			native:				document.native.value,
//			sun_tolerance:		document.sun_tolerance.value

function submit_details()
{
	// Bundle up the attributes.

<%== $attribute_elements %>
	var attribute_list = [];

	var joiner = '<%== $joiner %>'; // Must match $joiner in Design.pm.

	var id;
	var key;
	var value;

	for (var kind in attributes)
	{
		for (var i = 0; i < attributes[kind].length; i++)
		{
			id		= build_attribute_id('attribute', kind, attributes[kind][i]);
			value	= $(id).prop('checked');

			if (value == true)
			{
				attribute_list.push(kind + joiner + attributes[kind][i]);
			}
		}
	}

	// Bundle up the images.
	// We assume the displayed image numbers are the same as in the for loop,
	// so we don't include them in the packet sent to the server.

	var image_count	= <%== $$constants{max_image_count} %>;
	var image_list	= [];

	// Warning: This loop starts from 1 even though elsewhere image loops start from 0.

	var file_name;

	for (var i = 1; i <= image_count; i++)
	{
		id			= '#image_file_name_' + i;
		file_name	= $(id).val() || '';
		id			= '#image_description_' + i;

		image_list.push('image_' + i, file_name, $(id).val() || '');
	}

	// Bundle up the notes.
	// We assume the displayed note numbers are the same as in the for loop,
	// so we don't include them in the packet sent to the server.

	var note_count	= <%== $$constants{max_note_count} %>;
	var note_list	= [];

	// Warning: This loop starts from 1 even though elsewhere note loops start from 0.

	for (var i = 1; i <= note_count; i++)
	{
		id = '#note_note_' + i;

		note_list.push('note_' + i, $(id).val() );
	}

	// Bundle up the URLs.

	var url_count	= <%== $$constants{max_url_count} %>;
	var url_list	= [];

	// Warning: This loop starts from 1 even though elsewhere URL loops start from 0.

	for (var i = 1; i <= url_count; i++)
	{
		id = '#url_url_' + i;

		url_list.push('url_' + i, $(id).val() );
	}

	$.ajax
	({
		data:
		{
			aliases:			$('#flower_aliases').val(),
			attribute_list:		attribute_list.join(joiner),
			common_name:		$('#flower_common_name').val(),
			csrf_token:			$('#csrf_token').val(),
			height:				$('#flower_height').val(),
			publish:			$('#flower_publish').prop('checked') ? 'Yes' : 'No',
			width:				$('#flower_width').val(),
			image_list:			image_list.join(joiner),
			note_list:			note_list.join(joiner),
			scientific_name:	$('#flower_scientific_name').val(),
			url_list:			url_list.join(joiner)
		},
		dataType:	'html',
		method:		'POST',
		url:		'/AddFlower'
	})
	.done(function(html)
	{
		$('#flower_result_div')
		.empty()
		.append(html);
	})
	.fail(function(jqxhr, textStatus, error)
	{
		alert('Ajax status: ' + textStatus + ', ' + error);
	});

} // End of submit_details.

// -----------------------------------------------

function submit_garden()
{
	$.ajax
	({
		data:
		{
			garden_description:		$('#garden_description').val(),
			garden_name:			$('#garden_name').val(),
			garden_publish:			$('#garden_publish').prop('checked') ? 'Yes' : 'No',
			property_description:	$('#property_description').val(),
			property_name:			$('#property_name').val(),
			property_publish:		$('#property_publish').prop('checked') ? 'Yes' : 'No'
		},
		dataType:	'html',
		method:		'POST',
		url:		'/AddGarden'
	})
	.done(function(html)
	{
//		$('#garden_result_div')
//		.empty()
//		.append(html);

		$('#garden_result_div')
		.empty()
		.text('Submitted garden details');
	})
	.fail(function(jqxhr, textStatus, error)
	{
		alert('Ajax status: ' + textStatus + ', ' + error);
	});

} // End of submit_garden.

// -----------------------------------------------

function submit_object()
{
	$.ajax
	({
		data:
		{
			color_chosen:	$('#color_chosen').val(),
			color_code:		$('#color_code').val(),
			color_name:		$('#color_name').val(),
			object_name:	$('#object_name').val(),
			object_publish:	$('#object_publish').prop('checked') ? 'Yes' : 'No'
		},
		dataType:	'html',
		method:		'POST',
		url:		'/AddObject'
	})
	.done(function(html)
	{
//		$('#object_result_div')
//		.empty()
//		.append(html);

		$('#object_result_div')
		.empty()
		.text('Submitted object details');
	})
	.fail(function(jqxhr, textStatus, error)
	{
		alert('Ajax status: ' + textStatus + ', ' + error);
	});

} // End of submit_object.

// -----------------------------------------------

function submit_search()
{
	var fields = new Object();

	fields['csrf_token']	= $('#csrf_token').val();
	fields['search_text']	= $('#search_text').val();

	// Copy attributes from the search form.

	var range = [];

	var attribute_name;
	var id;
	var name;
	var value;

	for (var i = 0; i < attribute_types_table.length; i++)
	{
		attribute_name	= attribute_types_table[i]['name'];
		range			= attribute_types_table[i]['range'].split(', ');

		for (var j = 0; j < range.length; j++)
		{
			value			= range[j];
			id				= build_attribute_id('search', attribute_name, value);
			name			= id.substr(1); // Discard leading '#' to get the name to submit.
			fields[name]	= $(id).prop('checked'); // Returns 'true' or 'false'.
		}
	}

	$.ajax
	({
		data:		fields,
		dataType:	'html',
		type:		'POST',
		url:		'/Search'
	})
	.done(function(html)
	{
		$('#search_result_div')
		.empty()
		.append(html);

		$('#search_text')
		.focus();
	})
	.fail(function(jqxhr, textStatus, error)
	{
		alert('Ajax status: ' + textStatus + ', ' + error);
	});

} // End of submit_search.

// -----------------------------------------------

$(function()
{
	$('.design_garden_toolbar').controlgroup();
	$('.garden_garden_toolbar').controlgroup();
	$('.object_toolbar').controlgroup();

	window_width	= window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
	window_height	= window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

	set_virtual_parameters();
	get_attribute_types();
	get_object_table();

	// Enable the tabs before trying to work with them.

	$('global_tab_div')
	.tabs
	({
		active: 1
	});

	$('#design_property_menu')
	.selectmenu
	({
		change: function(event, data)
		{
			design_property_menu_changed(data);
		}
	});

	$('#garden_property_menu')
	.selectmenu
	({
		change: function(event, data)
		{
			garden_property_menu_changed(data);
		}
	});

	$('#garden_garden_menu')
	.selectmenu
	({
		change: function(event, data)
		{
			garden_garden_menu_changed(data);
		}
	});

	$('#object_menu')
	.selectmenu
	({
		change: function(event, data)
		{
			object_menu_changed(data);
		}
	});

	// If the Search tab is selected, give the focus to the search text.

	$('#global_tab_div')
	.tabs
	({
		activate: function(event, ui)
		{
			$('#search_text')
			.focus();
		}
	});

	// If the Objects tab is selected, give the focus to the object name.

	$('#global_object_tab')
	.tabs
	({
		activate: function(event, ui)
		{
			$('#object_name')
			.focus();
		}
	});

	// Active sub-tabs for Detail and Help.

	$("#global_details_tab")
	.tabs
	({
		active: 0
	});

	$("#global_help_tab")
	.tabs
	({
		active: 0
	});

	$('#color_spectrum')
	.spectrum
	({
		change:				function(color)
							{
								$('#color_chosen')
								.val(color.toHexString() ); // Put color in hidden form field for submit.

								$('#color_swatch_chosen')
								.css('background-color', color.toHexString() );
							},
		color:				'white',
		preferredFormat:	'hex',
		showInput:			true,
		showPalette:		true
	});

	$('#design_flower')
	.blur(function()
	{
		get_design_flower();
	});

	$('#design_flower_thumbnail')
	.click(function()
	{
		get_design_flower_icon();
	});

	$('#design_object')
	.blur(function()
	{
		get_design_object();
	});

	$('#design_object_thumbnail')
	.click(function()
	{
		get_design_object_icon();
	});

	$('#details_form')
	.submit(function()
	{
		submit_details();

		return false;
	});

	$('#garden_form')
	.submit(function()
	{
		submit_garden();

		return false;
	});

	$('#object_form')
	.submit(function()
	{
		submit_object();

		return false;
	});

	$('#search_form')
	.submit(function()
	{
		submit_search();

		return false;
	});

	$('#search_text')
	.focus();

	// Warning: Do not use jQuery UI on checkboxes or radio buttons.
	// There is a myriad of problems, especially related to timing of clicks.

});

</script>

</html>
